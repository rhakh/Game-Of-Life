diff --git a/src/MPI_GameOfLife.cpp b/src/MPI_GameOfLife.cpp
index 2901442..571edf9 100644
--- a/src/MPI_GameOfLife.cpp
+++ b/src/MPI_GameOfLife.cpp
@@ -42,10 +42,12 @@ void MPI_GameOfLife::printMap() {
 
     for (int y = 1; y < height + 1; y++) {
         for (int x = 1; x < width + 1; x++) {
-            if (((*map)[y][x] & 0x01) == 1)
-                ss << "*";
-            else
-                ss << ".";
+            // if (((*map)[y][x] & 0x01) == 1)
+            //     ss << "*";
+            // else
+            //     ss << ".";
+
+            ss << (int)(*map)[y][x] << " ";
         }
         ss << std::endl;
     }
@@ -130,6 +132,20 @@ void MPI_GameOfLife::liveGeneration(int chunk_beginning, int chunk_end, int my_r
     }
 }
 
+std::string get_line(std::vector<uint8_t> &line, int length) {
+    std::stringstream ss;
+
+    for (int i = 0; i < length; i++) {
+        // if (((*map)[y][x] & 0x01) == 1)
+        //     ss << "*";
+        // else
+        //     ss << ".";
+        ss << (int)line[i] << " ";
+    }
+
+    return ss.str();
+}
+
 void MPI_GameOfLife::sendAndRecvLine(int chunk_beginning, int chunk_end, int my_rank, int total_num_proc) {
     bool there_is_chunk_at_top = my_rank != 0;
     if(there_is_chunk_at_top) {
@@ -137,14 +153,22 @@ void MPI_GameOfLife::sendAndRecvLine(int chunk_beginning, int chunk_end, int my_
         // save to other_side_border. (1 to skip halo)
         int src = my_rank - 1;  // prev process
         int other_side_border = chunk_beginning - 1;
-        MPI_Recv(&(*map)[other_side_border][1], width, MPI_UNSIGNED_CHAR, src, TAG,
+
+        // MPI_Recv(&(*map)[other_side_border][1], width, MPI_UNSIGNED_CHAR, src, TAG,
+        //          MPI_COMM_WORLD, MPI_STATUS_IGNORE);
+        uint8_t arr[width] = {0};
+        MPI_Recv(&(arr[0]), width, MPI_UNSIGNED_CHAR, src, TAG,
                  MPI_COMM_WORLD, MPI_STATUS_IGNORE);
+        for (int i = 0; i < width; i++)
+            (*map)[other_side_border][i + 1] |= arr[i];
 
         // Send my side of the top border to dest. (1 to skip halo)
         int dest = my_rank - 1; // previous process
         int my_first_line = chunk_beginning;
         MPI_Send(&(*map)[my_first_line][1], width, MPI_UNSIGNED_CHAR, dest, TAG,
                  MPI_COMM_WORLD);
+        if (iteration == 3)
+            printf("[%d] Rank[%d]->[%d]-line %d: %s\n", this->iteration, my_rank, dest, my_first_line, get_line((*map)[my_first_line], width + 2).c_str());
     }
 
     int last_process = total_num_proc - 1;
@@ -152,16 +176,24 @@ void MPI_GameOfLife::sendAndRecvLine(int chunk_beginning, int chunk_end, int my_
     if(there_is_chunk_at_bottom) {
         // Send my side of the bottom border to dest. (1 to skip halo)
         int dest = my_rank + 1;  // next process
-        int my_last_column = chunk_end - 1;
-        MPI_Send(&(*map)[my_last_column][1], width, MPI_UNSIGNED_CHAR, dest, TAG,
+        int my_last_line = chunk_end - 1;
+        MPI_Send(&(*map)[my_last_line][1], width, MPI_UNSIGNED_CHAR, dest, TAG,
                  MPI_COMM_WORLD);
+        if (iteration == 3)
+            printf("[%d] Rank[%d]->[%d]-line %d: %s\n", this->iteration, my_rank, dest, my_last_line, get_line((*map)[my_last_line], width + 2).c_str());
 
         // Receive from src other side of the bottom border,
         // save to other_side_border. (1 to skip halo)
         int src = my_rank + 1;  // next process
-        int other_side_border = my_last_column + 1;
-        MPI_Recv(&(*map)[other_side_border][1], width, MPI_UNSIGNED_CHAR, src, TAG,
+        int other_side_border = my_last_line + 1;
+
+        // MPI_Recv(&(*map)[other_side_border][1], width, MPI_UNSIGNED_CHAR, src, TAG,
+        //          MPI_COMM_WORLD, MPI_STATUS_IGNORE);
+        uint8_t arr[width] = {0};
+        MPI_Recv(&(arr[0]), width, MPI_UNSIGNED_CHAR, src, TAG,
                  MPI_COMM_WORLD, MPI_STATUS_IGNORE);
+        for (int i = 0; i < width; i++)
+            (*map)[other_side_border][i + 1] |= arr[i];
     }
 }
 
@@ -169,16 +201,20 @@ void MPI_GameOfLife::liveNGeneration(int my_rank, int total_num_proc, int num_of
     int chunk_beginning = get_chunk_beginning(my_rank, total_num_proc);
     int chunk_end = get_chunk_end(my_rank, total_num_proc); // end index is not included in chunk
 
-    for (int i = 0; i < num_of_generations; ++i) {
+    for (int i = 0; i < num_of_generations; i++) {
         liveGeneration(chunk_beginning, chunk_end, my_rank, total_num_proc);
         sendAndRecvLine(chunk_beginning, chunk_end, my_rank, total_num_proc);
     }
 
     if (my_rank == 0) {
         // Receive other chunks and merge with the first one
+        int chunk_beginning = get_chunk_beginning(0, total_num_proc);
+        int chunk_end = get_chunk_end(0, total_num_proc);
+        std::cout << "rank=" << my_rank << ": b=" << chunk_beginning << ", e=" << chunk_end << std::endl;
         for(int src = 1; src < total_num_proc; src++) {
             int chunk_beginning = get_chunk_beginning(src, total_num_proc);
             int chunk_end = get_chunk_end(src, total_num_proc);
+            std::cout << "rank=" << src << ": b=" << chunk_beginning << ", e=" << chunk_end << std::endl;
             for(int y = chunk_beginning; y < chunk_end; y++) {
                 MPI_Recv(&(*map)[y][1], width, MPI_UNSIGNED_SHORT, src, TAG,
                          MPI_COMM_WORLD,MPI_STATUS_IGNORE);
diff --git a/src/MPI_main.cpp b/src/MPI_main.cpp
index 6c5417f..adbfc7d 100644
--- a/src/MPI_main.cpp
+++ b/src/MPI_main.cpp
@@ -55,7 +55,7 @@ int main(int argc, char **argv) {
     }
 
     double start_time = MPI_Wtime();
-    game.liveNGeneration(my_rank, total_num_proc, 26);
+    game.liveNGeneration(my_rank, total_num_proc, 3);
     double end_time = MPI_Wtime();
 
     if (my_rank == 0) {
